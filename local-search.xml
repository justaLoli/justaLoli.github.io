<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>地图着色问题</title>
    <link href="/posts/32813.html"/>
    <url>/posts/32813.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="问题：地图着色问题"><a href="#问题：地图着色问题" class="headerlink" title="问题：地图着色问题"></a>问题：地图着色问题</h2><p>问题简介：将一个图分成几部分，使得对于每一个部分，其中的节点互相不连接。</p><p>问题理解：这种问题往往有多种划分方式，即有多个解。可以采用贪心法找到其中的某一个解，或者使用回溯法遍历所有的可能解。</p><h2 id="设计与实现"><a href="#设计与实现" class="headerlink" title="设计与实现"></a>设计与实现</h2><ul><li><p>程序实现的数据结构：图（用于存储节点之间的网状关系），集合（用于存储划分中的每个部分），由集合构成的顺序表（用于存储划分），字符串，字符串构成的顺序表（用于存储节点的名字）。</p></li><li><p>各数据结构的UML图：</p></li></ul><pre><code class=" mermaid">classDiagram    class string&#123;    -char* str        +fprint(FILE*) Void        +operator=(char*) Void        +operator==(string) Bool    &#125;    class graph&#123;    -int nodeCount    +initgraph() Void    +islinked(int,int) Bool    &#125;    class set&#123;    -int size    -bool* setarray    +add() Void    +remove() Void    +isempty() Bool    +begin() iterator    +end() iterator    &#125;    class iterator&#123;    &lt;&lt;enumeration&gt;&gt;    -int pos    -set* fatherset    +operator*(): Int    +operator++()    +next(): iterator    &#125;</code></pre><ul><li><p>算法：实现了贪心法 <strong>及</strong> 回溯法。仅上交回溯法的代码。</p></li><li><p>环境：g++ -std&#x3D;c++11; MacOS，arm64</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>收获：回顾了计算概论的内容。学习了图在计算机中的存储。复习了c++中类的写法。</p><p>问题与解决办法：</p><ul><li>问题：集合中元素的遍历。由于集合元素的存储方式，元素的存储位置在内存中可能是分立的，给集合的遍历带来困难。</li><li>查阅资料，实现了一个集合的迭代器，封装了集合的遍历过程。</li></ul><p>不足：搜索效率不高。</p><h2 id="输入输出："><a href="#输入输出：" class="headerlink" title="输入输出："></a>输入输出：</h2><p>输入为<code>filei.txt</code>，包含：</p><p>一个整数N，代表节点个数；N个字符串，代表每个节点的名字；一个N * N的矩阵，每个数是0或1。<code>a[i][j]=1</code>代表节点i和j相连。</p><p>输出为<code>fileo.txt</code>，包含：</p><p>所有可能的分划，以及可能的分划总数，以及最少的分划数。</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* 地图着色问题 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXLEN 20</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">string</span>&#123;<br><span class="hljs-comment">/* 类定义：字符串 */</span><br><span class="hljs-keyword">private</span>:<br><span class="hljs-comment">/* 存储结构：顺序存储 */</span><br><span class="hljs-type">char</span> str[MAXLEN] = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">/* 操作：打印字符串 */</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s &quot;</span>,str);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fprint</span><span class="hljs-params">(FILE *fp)</span></span>&#123;<br><span class="hljs-comment">/* 操作：打印字符串 */</span><br><span class="hljs-built_in">fprintf</span>(fp,<span class="hljs-string">&quot;%s &quot;</span>,str);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> <span class="hljs-type">char</span> s[])&#123;<br><span class="hljs-comment">/* 操作：字符串赋值 */</span><br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (; i &lt; s[i]!=<span class="hljs-string">&#x27;\0&#x27;</span> &amp;&amp; i&lt;MAXLEN ; ++i)<br>&#123;<br>str[i] = s[i];<br>&#125;<br>str[i]=<span class="hljs-string">&#x27;\0&#x27;</span>;<br>&#125;<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> string s)&#123;<br><span class="hljs-comment">/* 操作：字符串比较是否相等 */</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; MAXLEN; ++i)<br>&#123;<br><span class="hljs-keyword">if</span>(str[i]!=s.str[i])<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> <span class="hljs-type">char</span> s[])&#123;<br>string ts;ts = s;<br><span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>==ts;<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">graph</span>&#123;<br><span class="hljs-comment">/* 类定义：图 */</span><br><span class="hljs-keyword">private</span>:<br><span class="hljs-comment">/* 存储结构：顺序存储 */</span><br><span class="hljs-comment">/* 逻辑关系：网状结构 */</span><br><span class="hljs-type">int</span> grapharr[MAXLEN][MAXLEN]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> n=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">/* 构造函数，填入图的节点数 */</span><br><span class="hljs-built_in">graph</span>(<span class="hljs-type">int</span> nn)&#123;n=nn;&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">initgraph</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">/* 初始化函数，读入图的数据 */</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; ++j)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;grapharr[i][j]);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">initgraph</span><span class="hljs-params">(FILE *fp)</span></span>&#123;<br><span class="hljs-comment">/* 初始化函数，读入图的数据 */</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; ++j)<br>&#123;<br><span class="hljs-built_in">fscanf</span>(fp,<span class="hljs-string">&quot;%d&quot;</span>,&amp;grapharr[i][j]);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">/* 操作：判断两个节点是否连接上 */</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">islinked</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span>&#123;<span class="hljs-keyword">return</span> grapharr[a][b];&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">set</span>&#123;<br><span class="hljs-comment">/* 类定义：集合 */</span><br><span class="hljs-keyword">private</span>:<br><span class="hljs-comment">/* 逻辑关系：集合；但是在内部实现时，利用了元素的线性结构 */</span><br><span class="hljs-comment">/* 存储结构：顺序存储 */</span><br><span class="hljs-type">int</span> size = <span class="hljs-number">0</span>;<br><span class="hljs-type">bool</span> setarray[MAXLEN] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>&#123;<br><span class="hljs-comment">/* 操作：添加元素 */</span><br><span class="hljs-keyword">if</span>(i&gt;=<span class="hljs-number">0</span> &amp;&amp; i&lt;MAXLEN &amp;&amp; <span class="hljs-keyword">not</span> <span class="hljs-built_in">isexist</span>(i))&#123;<br>setarray[i] = <span class="hljs-literal">true</span>;<br>size++;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>&#123;<br><span class="hljs-comment">/* 操作：删除元素 */</span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">isexist</span>(i))&#123;<br>setarray[i] = <span class="hljs-literal">false</span>;<br>size--;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isempty</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">return</span> !size;&#125;<span class="hljs-comment">/* 判断集合是否为空 */</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isexist</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>&#123;<br><span class="hljs-comment">/* 判断元素是否存在 */</span><br><span class="hljs-keyword">return</span> i&gt;=<span class="hljs-number">0</span> &amp;&amp; i&lt;MAXLEN &amp;&amp; setarray[i];<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">iterator</span>&#123;<br><span class="hljs-comment">/* 类定义：集合的迭代器，用于遍历集合的所有元素 */</span><br><span class="hljs-type">int</span> pos=<span class="hljs-number">0</span>;<br>set* fatherset = <span class="hljs-literal">nullptr</span>;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">iterator</span>(set* ptr,<span class="hljs-type">int</span> n)&#123;<br><span class="hljs-comment">/* 构造函数：给定一个指定位置 */</span><br>pos = n<span class="hljs-number">-1</span>;<br>fatherset = ptr;<br>(*<span class="hljs-keyword">this</span>)++;<br>&#125;<br><span class="hljs-built_in">iterator</span>(set* ptr)&#123;<br><span class="hljs-comment">/* 构造函数：定在初始位置 */</span><br>pos = <span class="hljs-number">-1</span>;<br>fatherset = ptr;<br>(*<span class="hljs-keyword">this</span>)++;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-keyword">operator</span>++()&#123;<br><span class="hljs-comment">/* 操作：自增 */</span><br>pos++;<br><span class="hljs-keyword">if</span>(pos&gt;=MAXLEN)<span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">while</span>(fatherset-&gt;setarray[pos]==<span class="hljs-number">0</span>)&#123;<br>pos++;<br><span class="hljs-keyword">if</span>(pos&gt;=MAXLEN)<span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-keyword">operator</span>++(<span class="hljs-type">int</span> k)&#123;<br><span class="hljs-comment">/* 操作：自增 */</span><br>pos++;<br><span class="hljs-keyword">if</span>(pos&gt;=MAXLEN)<span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">while</span>(fatherset-&gt;setarray[pos]==<span class="hljs-number">0</span>)&#123;<br>pos++;<br><span class="hljs-keyword">if</span>(pos&gt;=MAXLEN)<span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-keyword">operator</span>*()<span class="hljs-type">const</span>&#123;<br><span class="hljs-comment">/* 操作：取值 */</span><br><span class="hljs-keyword">return</span> pos;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-keyword">operator</span>!=(<span class="hljs-type">const</span> iterator&amp; it)&#123;<br><span class="hljs-comment">/* 运算：是否不等 */</span><br><span class="hljs-keyword">return</span> it.pos!=pos;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> iterator&amp; it)&#123;<br><span class="hljs-comment">/* 运算：是否相等 */</span><br><span class="hljs-keyword">return</span> it.pos==pos;<br>&#125;<br><span class="hljs-function">iterator <span class="hljs-title">next</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">iterator</span>(fatherset,pos+<span class="hljs-number">1</span>);<br>&#125;<br>&#125;;<br><span class="hljs-function">iterator <span class="hljs-title">begin</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">/* 操作：得到一个指向首个元素的迭代器 */</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">iterator</span>(<span class="hljs-keyword">this</span>);<br>&#125;<br><span class="hljs-function">iterator <span class="hljs-title">begin</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>&#123;<br><span class="hljs-comment">/* 操作：得到一个指向首个元素的迭代器 */</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">iterator</span>(<span class="hljs-keyword">this</span>);<br>&#125;<br><span class="hljs-function">iterator <span class="hljs-title">end</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">/* 操作：得到一个指向末尾的迭代器 */</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">iterator</span>(<span class="hljs-keyword">this</span>,MAXLEN);<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isunrelated</span><span class="hljs-params">(set targetset,graph g,<span class="hljs-type">int</span> node)</span></span>&#123;<br><span class="hljs-comment">/* 判断图 g 上的 node 节点是否与 targetset 里面的所有节点都不相连 */</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = targetset.<span class="hljs-built_in">begin</span>();i!=targetset.<span class="hljs-built_in">end</span>();i++)<br>&#123;<br><span class="hljs-keyword">if</span>(g.<span class="hljs-built_in">islinked</span>(*i, node))&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printtempset</span><span class="hljs-params">(set tset,string i2s[MAXLEN])</span></span>&#123;<br><span class="hljs-comment">/* 将tset里面的元素对应的string全部打印。元素和字符串的对应关系存储在i2s[]中 */</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = tset.<span class="hljs-built_in">begin</span>();i!=tset.<span class="hljs-built_in">end</span>();i++)<br>&#123;<br>i2s[*i].<span class="hljs-built_in">print</span>();<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fprinttempset</span><span class="hljs-params">(FILE *fp,set tset,string i2s[MAXLEN])</span></span>&#123;<br><span class="hljs-comment">/* 将tset里面的元素对应的string全部打印。元素和字符串的对应关系存储在i2s[]中 */</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = tset.<span class="hljs-built_in">begin</span>();i!=tset.<span class="hljs-built_in">end</span>();i++)<br>&#123;<br>i2s[*i].<span class="hljs-built_in">fprint</span>(fp);<br>&#125;<br><span class="hljs-built_in">fprintf</span>(fp,<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">/* 节点数 */</span><br><span class="hljs-type">int</span> N=<span class="hljs-number">0</span>;<br><span class="hljs-comment">/* 用一个顺序表存储所有数字元素对应的节点名称 */</span><br>string indexToString[MAXLEN];<br>graph *mygraph;<br>set leftset;<br>set groupsets[<span class="hljs-number">20</span>];<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">loaddatafromfile</span><span class="hljs-params">(<span class="hljs-type">char</span> fpath[])</span></span>&#123;<br>FILE *fp;<br>fp = <span class="hljs-built_in">fopen</span>(fpath,<span class="hljs-string">&quot;r&quot;</span>);<br><span class="hljs-keyword">if</span>(fp==<span class="hljs-literal">NULL</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;&#125;<br><span class="hljs-comment">/* 录入节点数 */</span><br><span class="hljs-built_in">fscanf</span>(fp,<span class="hljs-string">&quot;%d&quot;</span>,&amp;N);<br><span class="hljs-comment">/* 录入所有名称 */</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; ++i)<br>&#123;<br><span class="hljs-type">char</span> ts[MAXLEN]=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-built_in">fscanf</span>(fp,<span class="hljs-string">&quot;%s&quot;</span>,ts);<br>indexToString[i] = ts;<br>&#125;<br><span class="hljs-comment">/* 实例化、初始化图 */</span><br>mygraph = <span class="hljs-keyword">new</span> <span class="hljs-built_in">graph</span>(N);<br>mygraph-&gt;<span class="hljs-built_in">initgraph</span>(fp);<br><br><span class="hljs-built_in">fclose</span>(fp);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> j = groupsets[i].<span class="hljs-built_in">begin</span>(); j != groupsets[i].<span class="hljs-built_in">end</span>(); j++)<br>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">not</span> <span class="hljs-built_in">isunrelated</span>(groupsets[i],*mygraph,*j))&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>&#125;<br><br><span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> shortestgroupnum = MAXLEN;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">search</span><span class="hljs-params">(FILE *fp,<span class="hljs-type">int</span> currentgroupnum, set::iterator currentanalyzenode)</span></span>&#123;<br><span class="hljs-comment">/* fp:写入结果的文件指针，currentgroupnum：目前有的分划数，</span><br><span class="hljs-comment">currentanalyzenode：目前要处理的节点 */</span><br><span class="hljs-keyword">if</span>(currentgroupnum&gt;<span class="hljs-number">4</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(currentanalyzenode == leftset.<span class="hljs-built_in">end</span>())&#123;<br><span class="hljs-comment">/* 完成了一次分划，输出分划结果 */</span><br><span class="hljs-keyword">if</span>(currentgroupnum &lt; shortestgroupnum)&#123;<br>shortestgroupnum = currentgroupnum;<br>&#125;<br>count++;<br><span class="hljs-built_in">fprintf</span>(fp,<span class="hljs-string">&quot;第%d个结果:\n&quot;</span>,count);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; currentgroupnum; i++)<br>&#123;<br><span class="hljs-built_in">fprinttempset</span>(fp,groupsets[i],indexToString);<br>&#125;<br><span class="hljs-built_in">fprintf</span>(fp,<span class="hljs-string">&quot;校验结果：%s\n&quot;</span>,<span class="hljs-built_in">check</span>()?<span class="hljs-string">&quot;正确&quot;</span>:<span class="hljs-string">&quot;错误&quot;</span>);<br><span class="hljs-built_in">fprintf</span>(fp,<span class="hljs-string">&quot;\n&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* 带回溯的将当前节点放置到所有可能的分划中，包括已有的分划和放入一个新分划 */</span><br>set::iterator i = currentanalyzenode;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;currentgroupnum;j++)&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">isunrelated</span>(groupsets[j],*mygraph , *i))&#123;<br>groupsets[j].<span class="hljs-built_in">add</span>(*i);<br>leftset.<span class="hljs-built_in">remove</span>(*i);<br><span class="hljs-comment">/* 放入已有的分划，向下搜索 */</span><br><span class="hljs-built_in">search</span>(fp,currentgroupnum,i.<span class="hljs-built_in">next</span>());<br><span class="hljs-comment">/* 回溯 */</span><br>groupsets[j].<span class="hljs-built_in">remove</span>(*i);<br>leftset.<span class="hljs-built_in">add</span>(*i);<br>&#125;<br>&#125;<br>groupsets[currentgroupnum].<span class="hljs-built_in">add</span>(*i);<br>leftset.<span class="hljs-built_in">remove</span>(*i);<br><span class="hljs-comment">/* 放入一个新分划，向下搜索 */</span><br><span class="hljs-built_in">search</span>(fp,currentgroupnum+<span class="hljs-number">1</span>,i.<span class="hljs-built_in">next</span>());<br><span class="hljs-comment">/* 回溯 */</span><br>groupsets[currentgroupnum].<span class="hljs-built_in">remove</span>(*i);<br>leftset.<span class="hljs-built_in">add</span>(*i);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">mymain</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">/* 实例化、初始化集合 */</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; ++i)<br>&#123;<br>leftset.<span class="hljs-built_in">add</span>(i);<br>&#125;<br><br>FILE *fp = <span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;fileo.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>);<br><span class="hljs-keyword">if</span>(fp==<span class="hljs-literal">NULL</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">-2</span>;<br><span class="hljs-comment">/* 搜索 */</span><br><span class="hljs-built_in">search</span>(fp,<span class="hljs-number">0</span>,leftset.<span class="hljs-built_in">begin</span>());<br><span class="hljs-comment">/* 结果 */</span><br><span class="hljs-built_in">fprintf</span>(fp,<span class="hljs-string">&quot;搜索完成，共%d个结果\n&quot;</span>, count);<br><span class="hljs-built_in">fprintf</span>(fp,<span class="hljs-string">&quot;最少分划个数为：%d&quot;</span>, shortestgroupnum);<br><br><span class="hljs-built_in">fclose</span>(fp);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">char</span> path[] = <span class="hljs-string">&quot;filei.txt&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">loaddatafromfile</span>(path))<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">mymain</span>();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>计算摄像学 第二讲 数字摄像流程</title>
    <link href="/posts/23312.html"/>
    <url>/posts/23312.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="第二讲-数字摄像流程（Digital-Photography-Pipeline"><a href="#第二讲-数字摄像流程（Digital-Photography-Pipeline" class="headerlink" title="第二讲 数字摄像流程（Digital Photography Pipeline"></a>第二讲 数字摄像流程（Digital Photography Pipeline</h2><!-- ISP --><p>参考书：</p><ol><li><a href="http://szeliski.org/book">http://szeliski.org/book</a> 《Computer Vision: Algorithms and Applications, 2nd ed.》</li><li><a href="https://imagingtext.github.io/">https://imagingtext.github.io</a> 《Computational Imaging》</li><li><a href="https://link.springer.com/referencework/10.1007/978-3-030-63416-2">https://link.springer.com/referencework/10.1007/978-3-030-63416-2</a> 第二版</li></ol><p>计算摄像的三个处理位置：成像之前，成像，成像之后</p><p>本课内容：</p><ul><li>图像传感器</li><li>模拟前端</li><li>颜色滤波</li><li>-&gt;</li><li>相机内部的图像处理（ISP</li></ul><!-- 视频：手机和相机的拍照对比，好机友姜唯。 --><h3 id="图像传感器-Imaging-Sensor"><a href="#图像传感器-Imaging-Sensor" class="headerlink" title="图像传感器 Imaging Sensor"></a>图像传感器 Imaging Sensor</h3><p>拍照：快门打开-&gt;传感器接收光子、储存光子-&gt;快门关闭，曝光结束-&gt;将光子转化成数字信号处理。</p><p>核心的感光组件：光电二极管（产生电子）、势井（存储电子）。</p><p>衡量光电二极管的一个指标：QE &#x3D; 光子量&#x2F;电子量</p><p>过曝：光子过多，势井饱和；欠曝：光子过少，随机性太高。除此以外的情况，电子数基本上<strong>线性的反映光子数</strong>。</p><p>两种图像传感器的芯片：CCD &amp; CMOS</p><table><thead><tr><th>CCD</th><th>CMOS</th></tr></thead><tbody><tr><td>更高感光度</td><td>更快读出</td></tr><tr><td>更低噪声</td><td>更低成本</td></tr></tbody></table><p>目前CMOS已经能达到接近CCD的性能。</p><h3 id="模拟前端"><a href="#模拟前端" class="headerlink" title="模拟前端"></a>模拟前端</h3><p>将传感器得到的光子（电压，模拟信号）转化为数字信号</p><p>电压-&gt;「模拟放大器」-&gt;模拟电压-&gt;「模数转换器」-&gt;数字信号-&gt;「编码」-&gt;数字信号</p><blockquote><p>fun fact: ISO调整的是「模拟放大器」的强度。</p></blockquote><h3 id="颜色滤波器"><a href="#颜色滤波器" class="headerlink" title="颜色滤波器"></a>颜色滤波器</h3><p>可见光：400-700nm波长</p><p>大多数光源含有不止一种波长的光。</p><p>不同的光谱频率分布可以产生类似或者相同的颜色感知。</p><p>色温。</p><p>感光器的响应值受到光源的频谱和传感器对不同频率的接收能力影响。</p><p>人眼细胞分别对RGB三个颜色的接收能力最强。颜色滤波器在设计时参考了人眼。</p><p>滤波器在传感器上的分布？拜耳阵列（RGGB</p><p>为什么要更多绿色？简而言之，研究认为人眼对绿色更敏感。</p><p>颜色滤波没有标准答案。滤波会带来颜色风格的细微差异。</p><h3 id="相机内部对图像的处理（ISP"><a href="#相机内部对图像的处理（ISP" class="headerlink" title="相机内部对图像的处理（ISP"></a>相机内部对图像的处理（ISP</h3><p>ISP: Image Singal Processor: 广义的指将原始图像转换为“正常”图像的一系列图像处理操作。</p><p>白平衡；去马赛克；降噪；色调再现；压缩；etc。</p><h4 id="白平衡-White-Balance-WB"><a href="#白平衡-White-Balance-WB" class="headerlink" title="白平衡 White Balance WB"></a>白平衡 White Balance WB</h4><ul><li>人眼可以在不同光照环境下正确感知“白色是白色”。</li></ul><p>白平衡：不管在任何光源下，都能将白色物体还原成白色，用于校准色温的偏差。</p><p>方法：</p><ol><li>手动白平衡：手动确定某个点，某个物体是白色。</li><li>预设白平衡：预设一些光源条件下的色温</li></ol><p>经典的自动白平衡算法：</p><p>利用白平衡的特性：全局偏差，让全局RGB分别的统计值变成相同的，就白了。</p><ul><li>灰色世界假设<ul><li>逐通道计算RGB<strong>平均值</strong></li><li>逐通道利用<strong>平均值</strong>归一化</li><li>乘以“绿色通道的<strong>平均值</strong>”作为增益</li></ul></li><li>白色世界假设<ul><li>逐通道计算RGB<strong>最大值</strong></li><li>逐通道利用<strong>最大值</strong>归一化</li><li>乘以“绿色通道的<strong>最大值</strong>”作为增益</li></ul></li></ul><h4 id="去马赛克"><a href="#去马赛克" class="headerlink" title="去马赛克"></a>去马赛克</h4><p>拜耳阵列中，每个像素感受到不同颜色光，产生“马赛克效果”，需要去除。</p><p>用相邻的其它颜色像素取平均，得到当前像素的其它颜色值。</p><h4 id="降噪-Denoising"><a href="#降噪-Denoising" class="headerlink" title="降噪 Denoising"></a>降噪 Denoising</h4><p>噪声在低光照时尤为明显。</p><p>噪声的来源比较复杂：</p><ul><li>散粒噪声：光子到达服从泊松分布</li><li>暗电流：电路热效应产生一些电子</li><li>读出噪声：传感器和模拟前端电路的噪声</li></ul><p>简单降噪算法：平均滤波（卷积，利用周围像素），中值滤波</p><p>更复杂的降噪算法</p><h4 id="（色彩空间转化）"><a href="#（色彩空间转化）" class="headerlink" title="（色彩空间转化）"></a>（色彩空间转化）</h4><p>相机内部可能会把RGB色彩空间转化成HSV色彩空间。</p><p>这件事的意义：将RGB分离成更加独立的变量，方便研究。</p><h4 id="色调再现（伽马矫正"><a href="#色调再现（伽马矫正" class="headerlink" title="色调再现（伽马矫正"></a>色调再现（伽马矫正</h4><p>最初是因为CRT显示器对颜色的现实是非线性的。</p><p>目前伽马矫正与CRT无关。</p><p>人眼对低亮度更敏感，因此将相机的线性感光修正为适合人眼的非线性感光。</p><h4 id="（图像压缩）"><a href="#（图像压缩）" class="headerlink" title="（图像压缩）"></a>（图像压缩）</h4><p>略</p><h4 id="补充：RAW图像格式的意义：线性！"><a href="#补充：RAW图像格式的意义：线性！" class="headerlink" title="补充：RAW图像格式的意义：线性！"></a>补充：RAW图像格式的意义：线性！</h4><p>ISP处理后的图像和原始光强是非线性的。这不利于研究。</p><p>RAW图像仍然保持了和环境光强的良好的线性性。对计算机视觉而言非常有用:D</p><p>对一般人：保存更多信息，后期空间。</p><p>RAW的坏处：噪声，无压缩，降低连拍速度</p><p>注：RAW可能也经过了一些与处理，比如去马赛克。</p><p>将jpeg还原为RAW是一件非常困难的事情。</p><h3 id="扩展内容"><a href="#扩展内容" class="headerlink" title="扩展内容"></a>扩展内容</h3><p>ISP深入理解： <a href="https://www.eecs.yorku.ca/~mbrown/ICCV2019_Brown.html">https://www.eecs.yorku.ca/~mbrown/ICCV2019_Brown.html</a></p><p>更好的看paper的方法：two minute papers youtube</p><p>用卷积神经网络进行超暗照片的增强 Learning to see in the dark. ChenChen UIUC等 2018；</p><p>Day-to-Night image Synthesis for Training Nighttime Neural ISPs</p>]]></content>
    
    
    <categories>
      
      <category>计算摄像学</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>胡椒厨房——现在的人，没有精力再DIY</title>
    <link href="/posts/52048.html"/>
    <url>/posts/52048.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h2><p>儿时的回忆往往是碎片的，除了某些闪光点，其它的经历往往都变得模糊。这是我的其中一个碎片。</p><p>那可能是我很小的时候，在万达的一家餐厅。这是父母第一次带我走进这家餐厅。我记得，当我期待美食的时候，店员端上来一个呲呲作响的铁盘。我看着铁板上沸腾的神色的酱汁，血红的生肉，感到多么的新奇又不知所措。</p><p>我记得，在父母的指导下，我如何手忙脚乱地翻动盘中的食材，如何尝试把鸡蛋和米饭拌匀，如何小心翼翼地不让食材洒出来，如何用勺子用力把粘锅的食材刮下来，如何看着牛肉奇迹般地在我眼前变成我熟悉的颜色……</p><p>我记得，迫不及待品尝时，我如何被金属勺子轻轻烫到，在把握温度后如何大快朵颐，到最后，如何不舍地从盘底的沟槽中挖出最后一颗饭粒。饭粒在铁板的加热下，变得焦黄而且微微透明。</p><p>那是我小时候，去过的最好吃的餐厅之一。事实上，这可能是我第一次认识了什么是胡椒。（同样获此荣誉的，还有某次姥姥带我吃的老上海城隍庙。那次体验在我心里完全定义了什么是小笼包。）</p><p>当然，它获此荣誉，还有一个不得不提的原因：这之后的某个时候，它就被拆掉了，在我家附近再也找不到胡椒厨房这家店。这一次美好体验，就在我心里成为了抹不掉的念想。</p><p>之后，在离家较远的一个商城又看到了它。这之后，我偶尔会专程跑到这个很远的地方，专程吃一次这家店，在享用的同时重温当时的美妙回忆。我不会经常想到它。但是一旦想到，我几乎内心就不会再冒出其它选择。</p><p>然后，这天我又突发奇想去吃了一餐。却发现，这家店的名字从“胡椒厨房”变成了“铁板厨房”。虽然菜品没变，但店名的变化，总让人产生一些不安的情绪。事实上，从我家附近的胡椒厨房倒闭这件事就能看出，这个品牌的处境可能并不太好。</p><h2 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h2><p>胡椒厨房和普通的餐饮店有所区别。胡椒厨房的菜品主要包含米饭和肉（主要是牛肉），顾客也可以选择添加鸡蛋和蔬菜。在出餐时，店员端出的是放在高温铁盘上的生食。拿到餐品后，需要顾客自己对食材进行翻炒，直到菜品变熟后食用。也因此，胡椒厨房将自己定义为一家“DIY餐厅”。菜品口味方面，如「胡椒厨房」的店名，菜品中胡椒是重要调料，形成类似BBQ的烧烤风味。除了胡椒，顾客可以按照喜好，添加诸如「蒜香汁」等调料。</p><p>抛开童年回忆的光环，平心而论，胡椒厨房的菜品绝对是能分到「好吃」一类的。BBQ的风味显然具有很大的吸引力。此外，胡椒、蒜香的调料也可以带来独特的味觉享受。</p><p>更重要的是，DIY的特色使得胡椒厨房相比其它餐饮店具有一个巨大优势：<strong>它的饭菜一直是热的。</strong> 事实上，人对热的食物往往没有抵抗力。加热的铁盘，让食物可以长时间地保持在最适合的温度。</p><p>或许“石锅拌饭”之类的饭馆也有类似的特征，但请注意：胡椒厨房是铁盘而不是铁碗。在进食时，绝大部分的食材都能充分得到加热和保温。</p><p>要说菜品口味的不足，首先，它可能以咸口为主，对咸口不感冒的人可能不太喜欢；其次，它的菜品可能偏油腻。除此两点，它的口味大抵是令人满意的。</p><p>但是，味道好并不代表餐厅能活得好。我认为，至少有以下几点原因，让胡椒厨房变成现在这种局面。</p><p><strong>首先，也是最重要的，是价格问题。</strong> 胡椒厨房的人均50+，一言以蔽之，太贵了。一份「胡椒牛肉饭」需要49，还没鸡蛋，加个鸡蛋变成52。先不说一个鸡蛋三块钱的这个离谱问题，49，就一碗饭，一些牛肉还有一点胡椒，这个价格确实太贵了。</p><p>49，在呷哺呷哺我能买一整盘牛肉，再来个蔬菜双拼再点个锅底。这个量显然要比胡椒厨房足的多。有可能胡椒厨房的牛肉的来源更高级。但是，一言以蔽之，一般人吃不出来，<del>“感知不强”</del>。定价过高，注定了它不会受到太多欢迎。</p><p><strong>其次，胡椒厨房的定价引申出了第二个问题，就是品牌的定位不明。</strong> 笔者粗略地把线下餐饮业分成快餐和饭馆两种。从菜品上分析，胡椒厨房明显属于前者。胡椒厨房是一人一盘的一人食餐厅，这是几乎所有快餐店具有的共同特征。但是，人们对快餐的要求往往是廉价、快速。如果作为快餐店，它明显地太贵了。而且，它DIY的特性，也导致它并没有那么的“快速”。</p><p>但是，把胡椒厨房归类为“饭馆”又明显是不合适的。一人一盘的特点，让胡椒厨房不具备饭馆应有的社交功能。打个比方，如果约亲友聚会，胡椒厨房肯定不是备选项。此外，DIY的特性让它的进食过程显得有些紧张和狼狈，这不是饭馆应该有的。<em>（火锅店、烤肉店大概也具有DIY性质，但是首先，你不把食材放进去它就不会加热，所以至少还有喘息的机会；其次，它具有社交属性。）</em></p><p>它不甘于做廉价的快餐，它尝试做高端，它做50多的主食，做一百多的牛排；但是，它又没有高端餐饮应该具有的优雅和社交功能。不论从哪个角度看，胡椒厨房都是不合格的。</p><p><strong>此外，随着互联网的兴起，胡椒厨房DIY的性质又给它自身带来了第三重打击：无法外带</strong>。互联网改变了人们的饮食方式。现在，如果要吃快餐，人们往往会选择手机定外卖。因此，那些传统的“快餐店”，包括一些餐品不够高端的饭馆，都努力地做起了外卖的生意。但就在这样的时代，胡椒厨房无法外带，这就类似于宣告了自己的死亡。</p><p>目前这个时代，在繁忙的工作之余，人们大多靠定外卖草率解决；在周末休息的时候，人们大概会找一家优雅的餐馆给自己身心的享受。在这个时代，谁会专程出去吃一家看起来不那么高档，还需要自己忙活的DIY的餐厅呢？</p><p>现在的人，恐怕已经没有精力DIY了。</p><p>我祝愿我生活圈内的这唯一一家胡椒厨房还能长青。人们都时不时地希望自己能重温童年，我也希望能重温在我童年留下深刻印象的味道。我不希望当我脑海中闪过这种希望时，接踵而来的是无法释怀的空虚，即便这种希望可能与时代潮流相悖。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>计算概论A-不围棋</title>
    <link href="/posts/300.html"/>
    <url>/posts/300.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>PDF文稿: <a href="/assets/pdf/%E5%9F%BA%E4%BA%8EC++%E7%9A%84%E4%B8%8D%E5%9B%B4%E6%A3%8B%E6%B8%B8%E6%88%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%AE%9E%E7%8E%B0.pdf">基于C++的不围棋游戏程序的实现.pdf</a></p><p>在下面嵌一个iframe以供浏览。不过手机端可能不支持这个功能。</p><iframe src="/assets/pdf/基于C++的不围棋游戏程序的实现.pdf" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%" height="700px"> </iframe>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>流浪地球2一周目简评</title>
    <link href="/posts/52568.html"/>
    <url>/posts/52568.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>看了流浪地球2. 电影总体的观感是很优秀的。接近三个小时的片长，对于这个内容的体量而言比较合适，不会让人觉得乏味。我特地看的IMAX版本，视听效果足够震撼。这部片子，完全对得起它目前在网络上获得的高分评价。</p><p>下面总结一下我一周目后想到的一些内容。</p><h2 id="相比第一部的优点"><a href="#相比第一部的优点" class="headerlink" title="相比第一部的优点"></a>相比第一部的优点</h2><h3 id="移除了“春节”元素"><a href="#移除了“春节”元素" class="headerlink" title="移除了“春节”元素"></a>移除了“春节”元素</h3><p>我不喜欢融入大量档期元素的特定档期电影。这种电影给人的印象是：它只为特定档期服务，只能靠着“蹭”特定档期的“流量”来获得票房，进而给人的印象是这种电影的质量不高。</p><p>优秀的导演和编剧应该有一种自信：我的电影不应该局限在某个特定的档期或者特定的上映时间。应该有一种自信：我拍的电影在全年任何一个时间上映，都将是一部优秀的电影。</p><p>显然，郭帆拍流浪地球1的时候没有这种自信；2的时候有了。</p><h3 id="角色身份的“提升”"><a href="#角色身份的“提升”" class="headerlink" title="角色身份的“提升”"></a>角色身份的“提升”</h3><p>（我流浪地球1也是一周目，记忆不太深刻）总的来说，流浪地球1是以一对兄妹的视角叙述的。这一对兄妹在玩闹似地跑出地下城后，偶遇了某个救援队，并展开了故事。这种视角，严厉的说，让人感觉当时的危机和救援宛如小孩子的儿戏。</p><p>流浪地球2的主要角色：李雪健饰演的高级政客；吴京饰演的军人；刘德华饰演的工程师。他们有专业的身份，肩负重大的责任。以他们的视角代入事件，更能体现危机之危，救援之难，也更匹配流浪地球系列的宏大叙事。</p><p>比起让两个无业小孩支招拯救世界，让真正的专业人士拯救世界大概更好一些。</p><h2 id="二的优点"><a href="#二的优点" class="headerlink" title="二的优点"></a>二的优点</h2><h3 id="“前传”式的剧情设计"><a href="#“前传”式的剧情设计" class="headerlink" title="“前传”式的剧情设计"></a>“前传”式的剧情设计</h3><p>流浪地球2选择在1的时间线之前做文章，是一个十分高明的决定。至少有以下几个好处：</p><ol><li>设定交代。</li></ol><p>2中丰富了许多关于“数字生命”和机器生命“MOSS&#x2F;550W”的设定，并且完善了流浪地球时代联合政府（UEG）的国际政治制度和物资配给制的经济制度。</p><p>这些内容很重要。</p><p>关于MOSS的设定让MOSS的重要性大幅度提升。事实上，流浪地球1中，MOSS是一个可有可无的存在。事实上，把1中的MOSS换成一个不太智能的，Siri一样的角色，甚至换成一个没有智能、纯机械的程序，整体的故事不会发生太大改变，可以正常推进。但是，有了2中的背景交代，MOSS一跃而成为重要势力。相当于通过“前传”的交代，让配角一跃成为主角。</p><p>对流浪地球时代政治经济的交代，让人们对这个时代的大局有了基本的把握。1可以说是以兄妹的“点”的视角描述这个时代，2是以“面”的视角描述这个时代。12相映，让人们对当时的整个世界已经建立了基本的感知。这有利于更多的故事在这个世界下展开。</p><ol start="2"><li>大量伏笔埋设</li></ol><p>流浪地球2选择“前传”叙事，为故事创造了大量未解开的谜团。无须多言。</p><ol start="3"><li>给续作留足空间</li></ol><p>前两点的好处，归根结底都是这一点。</p><p>我觉得流浪地球1没有给续作流出足够空间。想象一下，如果没有2，直接在流浪地球1的结尾之后做文章，能写的故事似乎不多。但是有了2，续作能写的内容一下子就丰富了：</p><ul><li>MOSS一跃成为主角，MOSS和图恒宇成为主线（而且，由于是数字生命，这条主线不会因为角色的衰老死亡而停止，有机会一直延续），有很多故事可以基于它展开</li><li>留下大量谜团，解开这些包袱基本就足够撑起一个续作了</li><li>介绍了这个时代的大观，如果要翻拍原著的剧情也会相对容易。</li></ul><h3 id="内涵丰富，有深度，有主旨"><a href="#内涵丰富，有深度，有主旨" class="headerlink" title="内涵丰富，有深度，有主旨"></a>内涵丰富，有深度，有主旨</h3><p>上文提到，相比于1，角色的身份有了“提升”。高阶层的人物角色更配合2的宏大主题。因此，2中设计的内涵也更加丰富。不论是强调“危难当前唯有责任”的责任感，还是歌颂敢于牺牲自我的英雄，还是强调人类团结所能迸发的巨大力量，电影中都有足够的内容来撑起这些主题。</p><p>此外，还有一些关于亲情、关于使命在一代代人间的传承，关于数字生命、生死概念的讨论等等话题可以从电影中引申。总之，丰富的情节和内涵让这部片可以从多个角度分析。</p><p><del>不过我是一周目，我暂且还不能仔细分析。</del></p><h3 id="（相对）中庸的政治立场"><a href="#（相对）中庸的政治立场" class="headerlink" title="（相对）中庸的政治立场"></a>（相对）中庸的政治立场</h3><p>价值导向应该中国优先还是世界优先的问题上，电影一方面强调了中国在计划中的重要作用，另一方面又时刻强调，这是全人类——各国——共同奋斗的结果，很中庸地回答了这个问题。</p><p>危难由少数英雄解决还是多数集体解决的问题上，一方面有吴京、刘德华这种个人英雄角色，一方面电影也时刻强调了团结、合作的重要性，很中庸地回答了这个问题。</p><p>总之，基本上不会让观众在电影的政治立场上产生反感。 <strong>这在一个国民普遍政治神经紧绷的时代，是很难得的。</strong></p><h2 id="我觉得不好的地方"><a href="#我觉得不好的地方" class="headerlink" title="我觉得不好的地方"></a>我觉得不好的地方</h2><h3 id="“老套”的剧情"><a href="#“老套”的剧情" class="headerlink" title="“老套”的剧情"></a>“老套”的剧情</h3><p>不得不说，电影很多地方体现了灾难片的典型套路。概括地说，电影无非是 <code>somehow出现危机 -&gt; 人类团结！！！黄金精神！！！ -&gt; somehow解决危机</code> 这个流程它甚至演了两次。</p><p>这样抽象的看，剧情是很无聊的（当然，抽象到这个程度，基本绝大多数电影都是无聊的）</p><p>还有啊，后面恢复全球互联网的时候，经典的“要卡到最后一秒才能解决问题”，说实话这种剧情很无聊诶 <code>-_-</code></p><h3 id="过于强调“刺激”“紧张”"><a href="#过于强调“刺激”“紧张”" class="headerlink" title="过于强调“刺激”“紧张”"></a>过于强调“刺激”“紧张”</h3><p>这点其实是我的个人看法。</p><p>流浪地球的故事设定，它本可以有更沉静，更压抑的表现手段。面对灭世的灾难，人类集体的背井离乡，牺牲人类社会原有的一切，压制享乐，压制文化艺术，步入集权和配给制，倾尽全力拯救危机只为苟且为生，走在茫然无光的漫漫长路上。</p><p>这种氛围，不仅是一种“危”，更是一种“悲”。除了拯救危机体现出的紧张、刺激的情节外，更应该有一种浓厚的悲凉。很遗憾，这种悲凉似乎没有得到很好的体现。</p><p>结尾的 <em>Goodbye, solar system[多语种]</em> 可以算是这种悲的一个体现。只能说，有，但是不多。</p><p>这局限了作品的深度。全片过于强调危难和应对，紧张刺激的大场面首尾相接，相当于不断地给观众打鸡血，让观众兴奋，而无法让观众静下来感受这种“悲”。</p><p>我觉得这是比较遗憾的。</p><h3 id="关于BGM的一些事"><a href="#关于BGM的一些事" class="headerlink" title="关于BGM的一些事"></a>关于BGM的一些事</h3><p>本片主要的氛围都是紧张的。紧张的部分，本片的BGM做的相当不错。</p><p>不过，就像上一部分所说的，片子的“悲”的部分有些少。仅有的那些“悲”的部分，我觉得BGM做的不够好。就以最后 <em>Goodbye, solar system[多语种]</em> 的部分为例。就我个人的理解，我觉得BGM应该体现出宇宙的空灵和肃杀。但是，此时的BGM，事实上只能起到“宏大”的感受，而无法体现出“空灵”的感受。这种BGM不太能体现宇宙的感觉。</p><p>总之，紧张部分的BGM很优秀；但是沉静部分的BGM，我觉得本片缺少一个类似 <em>Interstellar</em> 中 <em>Day One</em> 那样的优秀作品。</p><p>类似我在上一部分的观点，我觉得片尾曲不应该是那种紧张感十足的电音，而应该归于沉静，类似<em>Interstellar</em> 中的 <em>Day One</em>。尤其是到了片尾，我觉得更应该让观众的内心从紧张归于沉静，给观众时间反思这整个经历，而不是靠片尾曲尝试把情绪推向又一个高潮。</p><p>总之，我认为紧张和沉静应该是交替的，流浪地球2在这方面做的不够好。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>足够优秀，并且写了一些我的想法。</p><p>就到这里。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>博客更新日志</title>
    <link href="/posts/51354.html"/>
    <url>/posts/51354.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="2023-02-26"><a href="#2023-02-26" class="headerlink" title="2023-02-26"></a>2023-02-26</h2><p>一定程度上修复了音乐播放器，换回了Aplayer。但是由于没有PJAX，依旧只将播放器放在了杂货的一个页面中。</p><h2 id="2023-02-25"><a href="#2023-02-25" class="headerlink" title="2023-02-25"></a>2023-02-25</h2><p>新增RSS。入口在杂货。</p><h2 id="2023-02-07"><a href="#2023-02-07" class="headerlink" title="2023-02-07"></a>2023-02-07</h2><p>发现文章页面底部的「引用」板块显示的链接还是旧的<code>justaloli.github.io</code>。修改了一下。</p><h2 id="2023-01-18"><a href="#2023-01-18" class="headerlink" title="2023-01-18"></a>2023-01-18</h2><p>尝试了很多，最终增加了一个<code>Aplayer</code>音乐播放器。</p><p><strong>issue</strong>：很遗憾，由于Fluid主题不支持Pjax，音乐在页面跳转时将暂停。为此我只能求其次，只在某几个页面显示音乐播放器。</p><p>让Fluid支持Pjax，或者让Aplayer不被重新加载，目前都不在我的能力范围内。后续会持续学习。</p><p><strong>追加issue</strong> 玩脱了，整个播放器都没有了。完全不知道出了什么问题 无语。</p><p>做了很多好像什么都没有做。暂时搁置。</p><h2 id="2023-01-17"><a href="#2023-01-17" class="headerlink" title="2023-01-17"></a>2023-01-17</h2><p>对站点进行了萌ICP备案</p><p>给网页增加了一个<code>sakana🐟～</code>小组件，好玩！</p><h2 id="2023-01-16"><a href="#2023-01-16" class="headerlink" title="2023-01-16"></a>2023-01-16</h2><p>对 <code>fluid</code> 主题源码进行了一些修改，调整了「友链」（在这个博客下叫做杂货铺！）的布局和写作方式。</p><p>不过这些改变不是通过注入自己的代码实现的，而是直接修改fluid主题源码实现的，有一些不优雅。不过我比较满意。梦想是做成瀑布流，不过对我而言太困难。</p><h2 id="2023-01-15"><a href="#2023-01-15" class="headerlink" title="2023-01-15"></a>2023-01-15</h2><p>更换了网站头图，并彻底调整了网页配色。</p><h2 id="2023-01-13"><a href="#2023-01-13" class="headerlink" title="2023-01-13"></a>2023-01-13</h2><p>注册了新域名 <code>justaloli.site</code>，做了域名解析和cloudflare的CDN加速</p><h2 id="2023-01-12"><a href="#2023-01-12" class="headerlink" title="2023-01-12"></a>2023-01-12</h2><p>建站第一天。部署在Github Page<code>justaloli.github.io</code>。确定了博客框架<code>hexo</code>，确定了主题<code>fluid</code>，确定了网站名<code>Loli的杂货铺</code>。</p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>本博客的搭建流程-续</title>
    <link href="/posts/19711.html"/>
    <url>/posts/19711.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>本博客的搭建，离不开我的一位高中同学兼好友的指路： <a href="https://mug-chen.github.io/posts/23043.html">https://mug-chen.github.io/posts/23043.html</a> 。他的文章简明且直击要害，为这个博客的搭建起到了灯塔一般的作用。</p><p>不过，由于过于简明，初阅他的文章有一定难度。本文主要在这篇文章的基础上，补充一些知识点。</p><h2 id="1-什么是hexo？为什么用hexo而不用wordpress之类的？"><a href="#1-什么是hexo？为什么用hexo而不用wordpress之类的？" class="headerlink" title="1. 什么是hexo？为什么用hexo而不用wordpress之类的？"></a>1. 什么是hexo？为什么用hexo而不用wordpress之类的？</h2><p>在这之前，我们先要明确一个网站的基本构成。</p><p>十分粗略的说，一个网页（的前端）包含三个部分：HTML，CSS，JS。直观的说，HTML负责告诉浏览器：网页上需要显示哪些内容；CSS负责告诉浏览器：这些内容以何种样式（例如：字体大小和颜色）显示；JS负责告诉浏览器：网页将如何反馈用户的操作。再形象一些，如果将网页比作人体，HTML是骨架，CSS是皮肤，JS是肌肉（人的动作）。</p><p>因此，如果要建立一个网页，至少需要熟悉上述三个部分以及它们之间的相互作用，这无疑非常困难。好在，这世上不乏现成的工具，我们只需要对这些工具进行简单的操作，它们就能帮我们生成所需的HTML，CSS，JS，以及一系列网页所需的文件。</p><p><strong>hexo</strong> 就是这样的一个工具。<code>hexo</code>是一个专门的博客框架。有了它，我们只需要埋头撰写博文，无需在意HTML、CSS、JS一流，它会自动由我们的博文生成精美的网页。</p><p>虽然世上还有<code>wordpress</code>等博客框架，但是选择<code>hexo</code>几乎是一个必然。我和我朋友的博客是利用 <code>Github Page</code> 呈现的。 <code>Github Page</code> 的优势是免费，劣势是其显示的网页必须是 <strong>静态</strong> 的。<code>wordpress</code>是动态的，必须建立在服务器上。这意味着，建立一个<code>wordpress</code>博客需要租服务器，并掏钱。而<code>hexo</code>生成的正好是静态网页。</p><p><del>你做静态网页的时候很爽，你部署之后不断刷新网页的样子也很狼狈（这句话的意思：静态网页导致整个网页都能被缓存，而由于缓存的存在，上传的更改无法被及时体现在网页上），大概要延后几分钟</del></p><blockquote><p>关于为什么使用<code>hexo</code>，更多内容可以参阅：</p><p><a href="https://blog.csdn.net/xinghaikongmeng/article/details/107399643">https://blog.csdn.net/xinghaikongmeng/article/details/107399643</a></p></blockquote><h2 id="2-后续内容：一些自定义和美化经验"><a href="#2-后续内容：一些自定义和美化经验" class="headerlink" title="2. 后续内容：一些自定义和美化经验"></a>2. 后续内容：一些自定义和美化经验</h2><h3 id="1-配置-config-yml"><a href="#1-配置-config-yml" class="headerlink" title="1. 配置_config.yml"></a>1. 配置<code>_config.yml</code></h3><p>里面包含博客的诸多基本设置，可以自行设置更改。其中各项栏目的作用可以参见：</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/127786638">https://zhuanlan.zhihu.com/p/127786638</a></p></blockquote><h3 id="2-自定义主题"><a href="#2-自定义主题" class="headerlink" title="2. 自定义主题"></a>2. 自定义主题</h3><p>最好的做法是自行检索，推荐的关键词“hexo”“主题”。最好是：先看看主题推荐的文章，确定自己想使用的主题 -&gt; 直接搜索主题名称，按照官网的提示和文档进行设置。</p><p>主题设置在 <code>_config.主题名称.yml</code> 中，需要按照主题给出的官方文档进行修改。</p><p>在我看来，美化博客好比装修自己的家，繁琐但有趣。希望你享受这个过程:D</p><h3 id="3-一些使用小组件"><a href="#3-一些使用小组件" class="headerlink" title="3. 一些使用小组件"></a>3. 一些使用小组件</h3><ol><li>不在url中使用中文的组件：abbrlink</li><li>方便管理图片的组件：asset-image</li></ol><blockquote><p>参阅：</p><p><a href="https://blog.csdn.net/qq_42780289/article/details/102662091">https://blog.csdn.net/qq_42780289/article/details/102662091</a></p><p><a href="https://www.cnblogs.com/QianBoy/p/8721529.html">https://www.cnblogs.com/QianBoy/p/8721529.html</a></p></blockquote><h3 id="4-cdn加速"><a href="#4-cdn加速" class="headerlink" title="4. cdn加速"></a>4. cdn加速</h3><ul><li>提前说：这个部分 <strong>要花钱，且要持续花钱（域名基本只租不卖）</strong></li></ul><h4 id="为什么需要cdn加速？"><a href="#为什么需要cdn加速？" class="headerlink" title="为什么需要cdn加速？"></a>为什么需要cdn加速？</h4><p>因为众所周知的原因，<code>Github Page</code> 打开，太慢了。</p><h4 id="什么是cdn加速？"><a href="#什么是cdn加速？" class="headerlink" title="什么是cdn加速？"></a>什么是cdn加速？</h4><p>一个简单的理解是，cdn是一些缓存服务器，将你网页的资源存放在距离用户更近的服务器中。这样，可以加速内容的访问，同时缓解主服务器的压力。</p><h4 id="配置cdn加速"><a href="#配置cdn加速" class="headerlink" title="配置cdn加速"></a>配置cdn加速</h4><p>这里选择cloudflare提供的cdn服务（注：主要的原因是匿名且免费。cloudflare虽然不在中国，但访问速度比github快不少）。</p><p><strong>不过，要注意，在cdn加速前我们需要先拥有一个域名</strong>，而这常常是花钱的。</p><p>这里以腾讯云为例。</p><h5 id="1-购买域名"><a href="#1-购买域名" class="headerlink" title="1. 购买域名"></a>1. 购买域名</h5><p>直接到腾讯云域名购买，输入想要的域名，对应价格购买就行了。不同顶级域的价格会有差距。像这个 <a href="https://justaloli.site/">justaloli.site</a> ,  第一年仅需8元，童叟无欺。</p><p><img src="/posts/19711/%E8%B4%AD%E4%B9%B0%E5%9F%9F%E5%90%8D.jpeg"></p><p>注意：国内的域名购买<strong>需要实名</strong>；需要等待一段时间审核域名才能正式使用。</p><div style="width:30%;margin:auto"><p><img src="/posts/19711/%E4%BA%92%E8%81%94%E7%BD%91%E5%B9%B6%E9%9D%9E%E6%B3%95%E5%A4%96%E4%B9%8B%E5%9C%B0.jpg" alt="互联网并非法外之地！"></p></div><h5 id="2-注册cloudflare"><a href="#2-注册cloudflare" class="headerlink" title="2. 注册cloudflare"></a>2. 注册cloudflare</h5><p>注册后点击“添加站点”，输入刚刚购买的域名 <a href="https://justaloli.site/">justaloli.site</a>，下一步选择免费计划，然后继续。</p><p><img src="/posts/19711/%E9%80%89%E6%8B%A9%E8%AE%A1%E5%88%92.jpeg"></p><h5 id="3-向cloudflare给出dns记录。"><a href="#3-向cloudflare给出dns记录。" class="headerlink" title="3. 向cloudflare给出dns记录。"></a>3. 向cloudflare给出dns记录。</h5><p>这一步紧随第二步，就是网站的下一页。在这里我们要手动指出 <a href="https://justaloli.site/">justaloli.site</a> 要指向哪个ip地址。</p><p><strong>首先：</strong> 我们要明确我们网页的ip地址。博客目前的域名仍然是<code>justaloli.github.io</code>，我们在命令行输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#Windows</span><br>ping justaloli.github.io<br><span class="hljs-comment">#MacOS或Linux</span><br>dig justaloli.github.io<br></code></pre></td></tr></table></figure><p>在输出中可以找到服务器的ip地址。我们只需要从这些ipv4地址中选一个就可以了。</p><p><img src="/posts/19711/%E7%A1%AE%E5%AE%9Aip.jpeg"></p><p><strong>其次：</strong> 在cloudflare上手动添加dns记录。每条记录主要有三项：类型、名称、地址。我们至少需要两条。</p><ul><li>第一条：类型填<code>A</code>，名称填<code>@</code>，地址填上文找到的ip；</li><li>第二条：类型填<code>A</code>，名称填<code>www</code>，地址填上文找到的ip。</li></ul><p>这个操作是在指示cloudflare，将<code>justaloli.site</code>和<code>www.justaloli.site</code>的域名解析到我们网站的ip。</p><p><img src="/posts/19711/%E6%B7%BB%E5%8A%A0dns%E8%AE%B0%E5%BD%95.jpeg"></p><p>你可能会注意到记录左侧有橙色小三角。无需理会，继续。</p><p><strong>最后：</strong> 将我们注册的<code>justaloli.site</code>的域名服务器改成cloudflare的服务器。</p><p><img src="/posts/19711/cloudflare%E6%8F%90%E7%A4%BA%E4%BF%AE%E6%94%B9dns%E6%9C%8D%E5%8A%A1%E5%99%A8.jpeg" alt="cloudflare网站上的指示"></p><p>打开腾讯云的控制台，进入域名的 <code>概况</code> 页面，左下角 <code>DNS解析</code>，进行修改，将腾讯云内置的DNS服务器改成cloudflare网页上给出的服务器。</p><p><img src="/posts/19711/%E4%BF%AE%E6%94%B9dns.jpeg"></p><p><strong>完成后回到cloudflare。后续还有一些选项，建议开启HTTPS，并且将SSL策略设置为<code>完全</code> (这很重要)</strong></p><h5 id="4-把-Github-Page-的域名调整为-justaloli-site"><a href="#4-把-Github-Page-的域名调整为-justaloli-site" class="headerlink" title="4. 把 Github Page 的域名调整为 justaloli.site"></a>4. 把 <code>Github Page</code> 的域名调整为 <a href="https://justaloli.site/">justaloli.site</a></h5><p>在项目的<code>Settings-Pages</code>中，在下方的 <code>Custom domain</code> 位置填写 <a href="https://justaloli.site/">justaloli.site</a>。并保存。这时，如果前面一切顺利，github将自动完成DNS检测。</p><p><img src="/posts/19711/github%E7%9A%84dns%E6%A3%80%E6%B5%8B.jpeg"></p><p>完成后，建议勾选下面的强制HTTPS。</p><h5 id="5-同步我们本地的项目"><a href="#5-同步我们本地的项目" class="headerlink" title="5. 同步我们本地的项目"></a>5. 同步我们本地的项目</h5><p>完成后，回到Github项目主页，会发现多了一个<code>CNAME</code>文件。</p><p><img src="/posts/19711/%E9%A1%B9%E7%9B%AE.jpeg"></p><p>这个文件内容只有一行，就是我们的自定义域名 <a href="https://justaloli.site/">justaloli.site</a>。</p><p>这时，我们要在我们本地项目的 <code>/source/</code> 目录下创建一个一模一样的 <code>CNAME</code> 文件，填入我们的自定义域名。</p><p><strong>这很重要！否则我们在本地 <code>hexo d</code> 后，<code>Github</code> 上的 <code>CNAME</code> 文件会消失，自定义域名的设置会随之消失。</strong></p><p>一系列步骤完成后，就可以使用自定义的<a href="https://justaloli.site/">justaloli.site</a>访问博客了。</p><p><strong>Remark：</strong>如果中途出现哪一步有问题，不要着急，可以先等一小会，服务器更新需要时间。</p><blockquote><p>cdn部分可以参见：</p><p><a href="https://www.cnblogs.com/yuelblog/p/15829774.html">https://www.cnblogs.com/yuelblog/p/15829774.html</a></p><p><a href="https://www.zhihu.com/question/28814437">https://www.zhihu.com/question/28814437</a></p></blockquote><h2 id="附：Mac-amp-linux部署hexo博客的方式（比windows简单很多！）和一些截图"><a href="#附：Mac-amp-linux部署hexo博客的方式（比windows简单很多！）和一些截图" class="headerlink" title="附：Mac&amp;linux部署hexo博客的方式（比windows简单很多！）和一些截图"></a>附：Mac&amp;linux部署hexo博客的方式（比windows简单很多！）和一些截图</h2><p>以Mac为例。</p><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><ol><li>确保安装了homebrew，并确保homebrew使用了国内镜像</li><li>确保安装了git，并确保git可以通过代理等方式正确访问github</li></ol><p>上两条测试方式：在终端运行brew、再运行git，看是否有输出。</p><blockquote><p>关于终端的git如何使用代理，可以参阅：</p><p><a href="https://zhuanlan.zhihu.com/p/481574024">https://zhuanlan.zhihu.com/p/481574024</a></p></blockquote><h3 id="第一步：安装-node-js-和-hexo"><a href="#第一步：安装-node-js-和-hexo" class="headerlink" title="第一步：安装 node.js 和 hexo"></a>第一步：安装 node.js 和 hexo</h3><ol><li>node.js安装：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install node<br></code></pre></td></tr></table></figure><p><img src="/posts/19711/%E5%AE%89%E8%A3%85nodejs.jpeg" alt="安装node.js"></p><ol start="2"><li>hexo 安装：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p><img src="/posts/19711/%E5%AE%89%E8%A3%85hexo.jpeg" alt="安装hexo"></p><h3 id="第二步：创建项目，初始化hexo"><a href="#第二步：创建项目，初始化hexo" class="headerlink" title="第二步：创建项目，初始化hexo"></a>第二步：创建项目，初始化hexo</h3><ol><li>在某个位置，创建一个 <strong>空的</strong> 文件夹。</li><li>初始化hexo</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#先cd到创建的目录</span><br>hexo init<br></code></pre></td></tr></table></figure><p><img src="/posts/19711/%E5%88%9D%E5%A7%8B%E5%8C%96hexo.jpeg" alt="初始化hexo"></p><p>注意：如果报错，请确认git配置了代理。</p><ol start="3"><li>在localhost运行hexo</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#s是sever的简称</span><br>hexo s<br></code></pre></td></tr></table></figure><p><img src="/posts/19711/%E5%9C%A8%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E8%A1%8Chexo%E6%9C%8D%E5%8A%A1.jpeg" alt="hexo s"></p><h3 id="第三步：将项目上传到Github，建立Github-Page"><a href="#第三步：将项目上传到Github，建立Github-Page" class="headerlink" title="第三步：将项目上传到Github，建立Github Page"></a>第三步：将项目上传到Github，建立Github Page</h3><ol><li>创建github项目</li></ol><blockquote><p>可以参阅：</p><p><a href="https://zhuanlan.zhihu.com/p/28321740">https://zhuanlan.zhihu.com/p/28321740</a></p></blockquote><p>看到 <em>2.开始搭建博客</em> 的前一点部分就好了。</p><ol start="2"><li>配置本地的hexo项目</li></ol><p>这部分直接参阅友链的<a href="https://mug-chen.github.io/posts/23043.html">文章</a>就好啦！</p><p>关于Git命令，文章里提供的是SSH连接策略，这里再提供有关HTTPS连接策略的内容：</p><blockquote><p><a href="https://blog.csdn.net/qq_38800316/article/details/120679506">https://blog.csdn.net/qq_38800316/article/details/120679506</a></p></blockquote><p>总之就是，如果HTTPS登录时提示 <code>Support for password authentication was removed on August 13,2021.</code> ，就按照文中做法，将“密码”一栏改成在Github上创建的token即可。</p><ol start="3"><li>将本地的hexo项目“部署”到Github上</li></ol><p>还有很多近义词如“同步”“上传”“push”方便理解这项操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#这是安装hexo的一个组件，hexo将用这个组建调用git</span><br>npm install hexo-deployer-git --save<br><span class="hljs-comment">#g是generate的简称</span><br>hexo g <br><span class="hljs-comment">#d是deploy的简称</span><br>hexo d <br></code></pre></td></tr></table></figure><h3 id="第四步：撰写博文"><a href="#第四步：撰写博文" class="headerlink" title="第四步：撰写博文"></a>第四步：撰写博文</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new post 你的博文名字<br>hexo s<br><span class="hljs-comment">#用你喜欢的方式打开 /source/_posts/你的博文名字.md 并撰写，保存。</span><br></code></pre></td></tr></table></figure><p><strong>Remark：</strong> 撰写时，可以保持<code>hexo s</code>始终运行。这样，在你保存md文件后，刷新<code>localhost</code>，就能立刻看到效果。</p><p>上传修改到<code>Github Page</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br>hexo d<br></code></pre></td></tr></table></figure><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>文中引用的各类文章很多，不再一一列出。再次对 <code>MUG-chen</code> 以及文内所有引用源的作者表示感谢！</p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>欢迎光临杂货铺</title>
    <link href="/posts/1439.html"/>
    <url>/posts/1439.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>……</p><p>我就描述一下我对它的想象吧</p><p>这个杂货铺，它可能……处在一个相对繁忙的地段，周围都是匆匆走过的人和川流不息的车。</p><p>但是在杂货铺周围，人会少很多。它也许在一个巷子的内侧，也许在一条不是主干道的街边。</p><p>远远地能听见繁忙城市的底噪，反而更显此处的清净。</p><p>它就这样开着。它的店面很小，简单的招牌。没有大张旗鼓的卖力揽客，在一个大厦林立的城市中很不起眼</p><p>在城市的底噪之外，宁静地等待探寻到这里的客人</p><p>这是一家杂货铺，但每件杂物都只有一两份。似乎把杂物卖了赚钱并不是这个杂货铺的目的。更多的意义可能是……陈列</p><p>这大多是一些精致的、独特的小物件，可能很多都是在这个繁忙的城市中很难找到的。由这些性质推测，它的东西，大概有不少是旧物。</p><p>也因此，整个店的装潢都有一种古朴的气氛。</p><p>但并不破败。店主一直在细心地照料、布置这个地方。这里的每一件物品，可能都是他的收藏。每当有顾客走进这里，拿起一件杂物，店主都愿意和客人分享它背后的故事。</p><p>窗边有一张小桌子，店主可以和客人坐下聊天。当然，它是空的。</p><p>夕阳，斜射的阳光洒在室内，一片暖色。杂货铺就这样，静静等待有心人的到来。</p><p>门上的铃铛响了。有客人来了……</p><p>……</p></blockquote><p>是为序。</p><h2 id="社交媒体的尽头"><a href="#社交媒体的尽头" class="headerlink" title="社交媒体的尽头"></a>社交媒体的尽头</h2><p>为什么要做博客？</p><p>我并不是一个擅长分享或是写作的人。近几年，从创建微信公众号以来，前前后后搞了不少社交媒体，最大的感受是：能分享东西的平台越多，想分享的愿望、以及能分享的东西似乎越少了。</p><p>所以，当我有建博客的冲动的时候，我一般会首先让自己冷静下来：我没有必要再创建一个社交媒体。其次告诉自己，这是一个技术上超出我能力的事情。</p><p>不过，当陈做出一个博客的时候，我才意识到，建立一个博客在技术上是可行的。我和陈是高中同学。至少在半年前，我和他（大概）在网页上的知识都基本没有。如果他能够做出一个精美的博客，那我也一定可以。更棒的是，他专门写了一篇博文来介绍他的搭建过程。</p><p>所以，那种建立博客的欲望又萌生了。不过内心的另一个自己仍然在提醒我：我没有必要再创建一个社交媒体。但是这种欲望相比以往是那么强烈，挥之不去。我便在Tg的channel上问了问频道关注者的看法。有人回复：「 <em>去建吧，社交媒体不属于你的；可博客是</em> 」</p><p>所以我就“去建”了。最开始只是抱着试试的态度，却在一天内，几个小时，突然地做出来了。输入自己的域名，看到我的网页出现在我眼前的时候，我的心情很难以描述。就像是一直以来都认为不可能的事情，突然就做到了，还明晃晃的在眼前做到了。</p><p>那天晚上很激动，睡的很不好。</p><p>当然，建的同时我也一直在问自己，我到底建它干什么。这几天我也更频繁地翻看其他人的各种博客，不断思考“博客”相比微信公众号一类的社交网络平台的不同之处。</p><p>想明白了一点：博客不是良好的「推广平台」。</p><p>我对「推广平台」的理解是，一种可以比较轻松的让文章得到大范围的推广，使文章获得大量点击，并且（如果可能）可以让作者从流量中盈利的平台。</p><p>这个年代了，不论是微信公众号、微博、或者什么CSDN或者简书或者，whatever，各种平台，有着庞大的用户基数，先进的推荐算法，是当之无愧的「推广平台」。一个人，如果想让自己的文章广为人知，最好的做法便是注册其中一个甚至多个账号，摸清大数据和推荐算法的规律，写出博人眼球的文章，打尽可能多的tag，然后尽可能的转发并呼吁转发。</p><p>做博客显然，它就不是这样的心情。想要推广自己的人不会大费周章地，买一个没人能找到的域名，建立一个鲜有人光顾的网站。就像想要盈利的店铺不会选择开在寂寥的地方。</p><p>如果有人这么做了，只能说明一件事：意不在此。</p><p>如果建博客不是为了给别人看的，那答案只有一个了：这是给自己看的。或者说，这是一种纯粹的不为流量。我有一个很小的公众号，公众号给我的感觉是，如果我不更新，我会有隐隐的焦虑；如果观看数很少，我会产生一种消极情绪；如果我的公众号形成了某种风格，在想写另一个风格内容的时候，我会感到犹豫。</p><p>总之，似乎是社交媒体给人带来的一种压力。也许它是假的，可能是我比较敏感，因此只有我感到了这种压力。</p><p>但是在这里，似乎不会再有这种压力了。这里一切都是我的。我只管写我想写的就好了，没有人会看。有人看了我也不知道。</p><p>是的，这个网站目前不打算做任何和读者相关的互动。什么点赞评论转发，乃至文章阅读数，网站访问量，你看不到，我也看不到。</p><p>那为什么要建博客？一个本地的记事本不就好了吗？我想，这可能是人人都会有的一种分享欲。有的时候，遇到一些事情，终究还是想说出来，不论有没有人听。就像喊山。</p><p>就让「有人看」成为一个美好的幻想，而不是一个kpi吧。</p><p>当然，如果你有想写给我的内容，我有联系方式写在「关于」页面。我想表达的是，我不想让“想让人看到”在我心里成为一项必须达成的任务，成为一种压力。</p><p>抱着这种心态，我继续着博客的搭建和完善。</p><p>于是有了网站的名字：杂货铺。</p><h2 id="为什么是Loli"><a href="#为什么是Loli" class="headerlink" title="为什么是Loli"></a>为什么是Loli</h2><p>其实Loli（萝莉）是自称。当初起网名的时候，想给自己找一个“一眼看就知道这不是真的”的设定。所以就取名萝莉。</p><p>对，我，九岁萝莉（头头是道</p><p>至于取名Loli的其它原因，我广泛的喜欢一切可爱的东西。萝莉是一个代表。</p><p>当然，我已经很久没有刻意地去维护我“萝莉”的赛博形象了。所以用Loli这个词，可能是习惯使然。</p><p>用作网页标题，也是想增加一点活跃的气氛。就我对这个杂货铺的描述，可能氛围上有点太冷清了。其实我是个情绪变化比较极端的人，我有很活泼的一面的！所以也想有一些活跃的概念在网页里。</p><p>对了，一定要注明：<em><strong>本站所有萝莉为二次元概念。</strong></em></p><hr><p>最后，还是让我再次说出那句话吧：</p><p><em>欢迎光临杂货铺:D</em></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
