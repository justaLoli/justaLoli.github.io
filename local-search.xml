<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>博客更新日志</title>
    <link href="/posts/51354.html"/>
    <url>/posts/51354.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="2023-01-17"><a href="#2023-01-17" class="headerlink" title="2023-01-17"></a>2023-01-17</h2><p>对站点进行了萌ICP备案</p><p>给网页增加了一个<code>sakana🐟～</code>小组件，好玩！</p><h2 id="2023-01-16"><a href="#2023-01-16" class="headerlink" title="2023-01-16"></a>2023-01-16</h2><p>对 <code>fluid</code> 主题源码进行了一些修改，调整了「友链」（在这个博客下叫做杂货铺！）的布局和写作方式。</p><p>不过这些改变不是通过注入自己的代码实现的，而是直接修改fluid主题源码实现的，有一些不优雅。不过我比较满意。梦想是做成瀑布流，不过对我而言太困难。</p><h2 id="2023-01-15"><a href="#2023-01-15" class="headerlink" title="2023-01-15"></a>2023-01-15</h2><p>更换了网站头图，并彻底调整了网页配色。</p><h2 id="2023-01-13"><a href="#2023-01-13" class="headerlink" title="2023-01-13"></a>2023-01-13</h2><p>注册了新域名 <code>justaloli.site</code>，做了域名解析和cloudflare的CDN加速</p><h2 id="2023-01-12"><a href="#2023-01-12" class="headerlink" title="2023-01-12"></a>2023-01-12</h2><p>建站第一天。部署在Github Page<code>justaloli.github.io</code>。确定了博客框架<code>hexo</code>，确定了主题<code>fluid</code>，确定了网站名<code>Loli的杂货铺</code>。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>本博客的搭建流程-续</title>
    <link href="/posts/19711.html"/>
    <url>/posts/19711.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>本博客的搭建，离不开我的一位高中同学兼好友的指路： <a href="https://mug-chen.github.io/posts/23043.html">https://mug-chen.github.io/posts/23043.html</a> 。他的文章简明且直击要害，为这个博客的搭建起到了灯塔一般的作用。</p><p>不过，由于过于简明，初阅他的文章有一定难度。本文主要在这篇文章的基础上，补充一些知识点。</p><h2 id="1-什么是hexo？为什么用hexo而不用wordpress之类的？"><a href="#1-什么是hexo？为什么用hexo而不用wordpress之类的？" class="headerlink" title="1. 什么是hexo？为什么用hexo而不用wordpress之类的？"></a>1. 什么是hexo？为什么用hexo而不用wordpress之类的？</h2><p>在这之前，我们先要明确一个网站的基本构成。</p><p>十分粗略的说，一个网页（的前端）包含三个部分：HTML，CSS，JS。直观的说，HTML负责告诉浏览器：网页上需要显示哪些内容；CSS负责告诉浏览器：这些内容以何种样式（例如：字体大小和颜色）显示；JS负责告诉浏览器：网页将如何反馈用户的操作。再形象一些，如果将网页比作人体，HTML是骨架，CSS是皮肤，JS是肌肉（人的动作）。</p><p>因此，如果要建立一个网页，至少需要熟悉上述三个部分以及它们之间的相互作用，这无疑非常困难。好在，这世上不乏现成的工具，我们只需要对这些工具进行简单的操作，它们就能帮我们生成所需的HTML，CSS，JS，以及一系列网页所需的文件。</p><p><strong>hexo</strong> 就是这样的一个工具。<code>hexo</code>是一个专门的博客框架。有了它，我们只需要埋头撰写博文，无需在意HTML、CSS、JS一流，它会自动由我们的博文生成精美的网页。</p><p>虽然世上还有<code>wordpress</code>等博客框架，但是选择<code>hexo</code>几乎是一个必然。我和我朋友的博客是利用 <code>Github Page</code> 呈现的。 <code>Github Page</code> 的优势是免费，劣势是其显示的网页必须是 <strong>静态</strong> 的。<code>wordpress</code>是动态的，必须建立在服务器上。这意味着，建立一个<code>wordpress</code>博客需要租服务器，并掏钱。而<code>hexo</code>生成的正好是静态网页。</p><p><del>你做静态网页的时候很爽，你部署之后不断刷新网页的样子也很狼狈（这句话的意思：静态网页导致整个网页都能被缓存，而由于缓存的存在，上传的更改无法被及时体现在网页上），大概要延后几分钟</del></p><blockquote><p>关于为什么使用<code>hexo</code>，更多内容可以参阅：</p><p><a href="https://blog.csdn.net/xinghaikongmeng/article/details/107399643">https://blog.csdn.net/xinghaikongmeng/article/details/107399643</a></p></blockquote><h2 id="2-后续内容：一些自定义和美化经验"><a href="#2-后续内容：一些自定义和美化经验" class="headerlink" title="2. 后续内容：一些自定义和美化经验"></a>2. 后续内容：一些自定义和美化经验</h2><h3 id="1-配置-config-yml"><a href="#1-配置-config-yml" class="headerlink" title="1. 配置_config.yml"></a>1. 配置<code>_config.yml</code></h3><p>里面包含博客的诸多基本设置，可以自行设置更改。其中各项栏目的作用可以参见：</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/127786638">https://zhuanlan.zhihu.com/p/127786638</a></p></blockquote><h3 id="2-自定义主题"><a href="#2-自定义主题" class="headerlink" title="2. 自定义主题"></a>2. 自定义主题</h3><p>最好的做法是自行检索，推荐的关键词“hexo”“主题”。最好是：先看看主题推荐的文章，确定自己想使用的主题 -&gt; 直接搜索主题名称，按照官网的提示和文档进行设置。</p><p>主题设置在 <code>_config.主题名称.yml</code> 中，需要按照主题给出的官方文档进行修改。</p><p>在我看来，美化博客好比装修自己的家，繁琐但有趣。希望你享受这个过程:D</p><h3 id="3-一些使用小组件"><a href="#3-一些使用小组件" class="headerlink" title="3. 一些使用小组件"></a>3. 一些使用小组件</h3><ol><li>不在url中使用中文的组件：abbrlink</li><li>方便管理图片的组件：asset-image</li></ol><blockquote><p>参阅：</p><p><a href="https://blog.csdn.net/qq_42780289/article/details/102662091">https://blog.csdn.net/qq_42780289/article/details/102662091</a></p><p><a href="https://www.cnblogs.com/QianBoy/p/8721529.html">https://www.cnblogs.com/QianBoy/p/8721529.html</a></p></blockquote><h3 id="4-cdn加速"><a href="#4-cdn加速" class="headerlink" title="4. cdn加速"></a>4. cdn加速</h3><ul><li>提前说：这个部分 <strong>要花钱，且要持续花钱（域名基本只租不卖）</strong></li></ul><h4 id="为什么需要cdn加速？"><a href="#为什么需要cdn加速？" class="headerlink" title="为什么需要cdn加速？"></a>为什么需要cdn加速？</h4><p>因为众所周知的原因，<code>Github Page</code> 打开，太慢了。</p><h4 id="什么是cdn加速？"><a href="#什么是cdn加速？" class="headerlink" title="什么是cdn加速？"></a>什么是cdn加速？</h4><p>一个简单的理解是，cdn是一些缓存服务器，将你网页的资源存放在距离用户更近的服务器中。这样，可以加速内容的访问，同时缓解主服务器的压力。</p><h4 id="配置cdn加速"><a href="#配置cdn加速" class="headerlink" title="配置cdn加速"></a>配置cdn加速</h4><p>这里选择cloudflare提供的cdn服务（注：主要的原因是匿名且免费。cloudflare虽然不在中国，但访问速度比github快不少）。</p><p><strong>不过，要注意，在cdn加速前我们需要先拥有一个域名</strong>，而这常常是花钱的。</p><p>这里以腾讯云为例。</p><h5 id="1-购买域名"><a href="#1-购买域名" class="headerlink" title="1. 购买域名"></a>1. 购买域名</h5><p>直接到腾讯云域名购买，输入想要的域名，对应价格购买就行了。不同顶级域的价格会有差距。像这个 <a href="https://justaloli.site/">justaloli.site</a> ,  第一年仅需8元，童叟无欺。</p><p><img src="/posts/19711/%E8%B4%AD%E4%B9%B0%E5%9F%9F%E5%90%8D.jpeg"></p><p>注意：国内的域名购买<strong>需要实名</strong>；需要等待一段时间审核域名才能正式使用。</p><div style="width:30%;margin:auto"><p><img src="/posts/19711/%E4%BA%92%E8%81%94%E7%BD%91%E5%B9%B6%E9%9D%9E%E6%B3%95%E5%A4%96%E4%B9%8B%E5%9C%B0.jpg" alt="互联网并非法外之地！"></p></div><h5 id="2-注册cloudflare"><a href="#2-注册cloudflare" class="headerlink" title="2. 注册cloudflare"></a>2. 注册cloudflare</h5><p>注册后点击“添加站点”，输入刚刚购买的域名 <a href="https://justaloli.site/">justaloli.site</a>，下一步选择免费计划，然后继续。</p><p><img src="/posts/19711/%E9%80%89%E6%8B%A9%E8%AE%A1%E5%88%92.jpeg"></p><h5 id="3-向cloudflare给出dns记录。"><a href="#3-向cloudflare给出dns记录。" class="headerlink" title="3. 向cloudflare给出dns记录。"></a>3. 向cloudflare给出dns记录。</h5><p>这一步紧随第二步，就是网站的下一页。在这里我们要手动指出 <a href="https://justaloli.site/">justaloli.site</a> 要指向哪个ip地址。</p><p><strong>首先：</strong> 我们要明确我们网页的ip地址。博客目前的域名仍然是<code>justaloli.github.io</code>，我们在命令行输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#Windows</span><br>ping justaloli.github.io<br><span class="hljs-comment">#MacOS或Linux</span><br>dig justaloli.github.io<br></code></pre></td></tr></table></figure><p>在输出中可以找到服务器的ip地址。我们只需要从这些ipv4地址中选一个就可以了。</p><p><img src="/posts/19711/%E7%A1%AE%E5%AE%9Aip.jpeg"></p><p><strong>其次：</strong> 在cloudflare上手动添加dns记录。每条记录主要有三项：类型、名称、地址。我们至少需要两条。</p><ul><li>第一条：类型填<code>A</code>，名称填<code>@</code>，地址填上文找到的ip；</li><li>第二条：类型填<code>A</code>，名称填<code>www</code>，地址填上文找到的ip。</li></ul><p>这个操作是在指示cloudflare，将<code>justaloli.site</code>和<code>www.justaloli.site</code>的域名解析到我们网站的ip。</p><p><img src="/posts/19711/%E6%B7%BB%E5%8A%A0dns%E8%AE%B0%E5%BD%95.jpeg"></p><p>你可能会注意到记录左侧有橙色小三角。无需理会，继续。</p><p><strong>最后：</strong> 将我们注册的<code>justaloli.site</code>的域名服务器改成cloudflare的服务器。</p><p><img src="/posts/19711/cloudflare%E6%8F%90%E7%A4%BA%E4%BF%AE%E6%94%B9dns%E6%9C%8D%E5%8A%A1%E5%99%A8.jpeg" alt="cloudflare网站上的指示"></p><p>打开腾讯云的控制台，进入域名的 <code>概况</code> 页面，左下角 <code>DNS解析</code>，进行修改，将腾讯云内置的DNS服务器改成cloudflare网页上给出的服务器。</p><p><img src="/posts/19711/%E4%BF%AE%E6%94%B9dns.jpeg"></p><p><strong>完成后回到cloudflare。后续还有一些选项，建议开启HTTPS，并且将SSL策略设置为<code>完全</code> (这很重要)</strong></p><h5 id="4-把-Github-Page-的域名调整为-justaloli-site"><a href="#4-把-Github-Page-的域名调整为-justaloli-site" class="headerlink" title="4. 把 Github Page 的域名调整为 justaloli.site"></a>4. 把 <code>Github Page</code> 的域名调整为 <a href="https://justaloli.site/">justaloli.site</a></h5><p>在项目的<code>Settings-Pages</code>中，在下方的 <code>Custom domain</code> 位置填写 <a href="https://justaloli.site/">justaloli.site</a>。并保存。这时，如果前面一切顺利，github将自动完成DNS检测。</p><p><img src="/posts/19711/github%E7%9A%84dns%E6%A3%80%E6%B5%8B.jpeg"></p><p>完成后，建议勾选下面的强制HTTPS。</p><h5 id="5-同步我们本地的项目"><a href="#5-同步我们本地的项目" class="headerlink" title="5. 同步我们本地的项目"></a>5. 同步我们本地的项目</h5><p>完成后，回到Github项目主页，会发现多了一个<code>CNAME</code>文件。</p><p><img src="/posts/19711/%E9%A1%B9%E7%9B%AE.jpeg"></p><p>这个文件内容只有一行，就是我们的自定义域名 <a href="https://justaloli.site/">justaloli.site</a>。</p><p>这时，我们要在我们本地项目的 <code>/source/</code> 目录下创建一个一模一样的 <code>CNAME</code> 文件，填入我们的自定义域名。</p><p><strong>这很重要！否则我们在本地 <code>hexo d</code> 后，<code>Github</code> 上的 <code>CNAME</code> 文件会消失，自定义域名的设置会随之消失。</strong></p><p>一系列步骤完成后，就可以使用自定义的<a href="https://justaloli.site/">justaloli.site</a>访问博客了。</p><p><strong>Remark：</strong>如果中途出现哪一步有问题，不要着急，可以先等一小会，服务器更新需要时间。</p><blockquote><p>cdn部分可以参见：</p><p><a href="https://www.cnblogs.com/yuelblog/p/15829774.html">https://www.cnblogs.com/yuelblog/p/15829774.html</a></p><p><a href="https://www.zhihu.com/question/28814437">https://www.zhihu.com/question/28814437</a></p></blockquote><h2 id="附：Mac-amp-linux部署hexo博客的方式（比windows简单很多！）和一些截图"><a href="#附：Mac-amp-linux部署hexo博客的方式（比windows简单很多！）和一些截图" class="headerlink" title="附：Mac&amp;linux部署hexo博客的方式（比windows简单很多！）和一些截图"></a>附：Mac&amp;linux部署hexo博客的方式（比windows简单很多！）和一些截图</h2><p>以Mac为例。</p><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><ol><li>确保安装了homebrew，并确保homebrew使用了国内镜像</li><li>确保安装了git，并确保git可以通过代理等方式正确访问github</li></ol><p>上两条测试方式：在终端运行brew、再运行git，看是否有输出。</p><blockquote><p>关于终端的git如何使用代理，可以参阅：</p><p><a href="https://zhuanlan.zhihu.com/p/481574024">https://zhuanlan.zhihu.com/p/481574024</a></p></blockquote><h3 id="第一步：安装-node-js-和-hexo"><a href="#第一步：安装-node-js-和-hexo" class="headerlink" title="第一步：安装 node.js 和 hexo"></a>第一步：安装 node.js 和 hexo</h3><ol><li>node.js安装：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install node<br></code></pre></td></tr></table></figure><p><img src="/posts/19711/%E5%AE%89%E8%A3%85nodejs.jpeg" alt="安装node.js"></p><ol start="2"><li>hexo 安装：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p><img src="/posts/19711/%E5%AE%89%E8%A3%85hexo.jpeg" alt="安装hexo"></p><h3 id="第二步：创建项目，初始化hexo"><a href="#第二步：创建项目，初始化hexo" class="headerlink" title="第二步：创建项目，初始化hexo"></a>第二步：创建项目，初始化hexo</h3><ol><li>在某个位置，创建一个 <strong>空的</strong> 文件夹。</li><li>初始化hexo</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#先cd到创建的目录</span><br>hexo init<br></code></pre></td></tr></table></figure><p><img src="/posts/19711/%E5%88%9D%E5%A7%8B%E5%8C%96hexo.jpeg" alt="初始化hexo"></p><p>注意：如果报错，请确认git配置了代理。</p><ol start="3"><li>在localhost运行hexo</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#s是sever的简称</span><br>hexo s<br></code></pre></td></tr></table></figure><p><img src="/posts/19711/%E5%9C%A8%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E8%A1%8Chexo%E6%9C%8D%E5%8A%A1.jpeg" alt="hexo s"></p><h3 id="第三步：将项目上传到Github，建立Github-Page"><a href="#第三步：将项目上传到Github，建立Github-Page" class="headerlink" title="第三步：将项目上传到Github，建立Github Page"></a>第三步：将项目上传到Github，建立Github Page</h3><ol><li>创建github项目</li></ol><blockquote><p>可以参阅：</p><p><a href="https://zhuanlan.zhihu.com/p/28321740">https://zhuanlan.zhihu.com/p/28321740</a></p></blockquote><p>看到 <em>2.开始搭建博客</em> 的前一点部分就好了。</p><ol start="2"><li>配置本地的hexo项目</li></ol><p>这部分直接参阅友链的<a href="https://mug-chen.github.io/posts/23043.html">文章</a>就好啦！</p><p>关于Git命令，文章里提供的是SSH连接策略，这里再提供有关HTTPS连接策略的内容：</p><blockquote><p><a href="https://blog.csdn.net/qq_38800316/article/details/120679506">https://blog.csdn.net/qq_38800316/article/details/120679506</a></p></blockquote><p>总之就是，如果HTTPS登录时提示 <code>Support for password authentication was removed on August 13,2021.</code> ，就按照文中做法，将“密码”一栏改成在Github上创建的token即可。</p><ol start="3"><li>将本地的hexo项目“部署”到Github上</li></ol><p>还有很多近义词如“同步”“上传”“push”方便理解这项操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#这是安装hexo的一个组件，hexo将用这个组建调用git</span><br>npm install hexo-deployer-git --save<br><span class="hljs-comment">#g是generate的简称</span><br>hexo g <br><span class="hljs-comment">#d是deploy的简称</span><br>hexo d <br></code></pre></td></tr></table></figure><h3 id="第四步：撰写博文"><a href="#第四步：撰写博文" class="headerlink" title="第四步：撰写博文"></a>第四步：撰写博文</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new post 你的博文名字<br>hexo s<br><span class="hljs-comment">#用你喜欢的方式打开 /source/_posts/你的博文名字.md 并撰写，保存。</span><br></code></pre></td></tr></table></figure><p><strong>Remark：</strong> 撰写时，可以保持<code>hexo s</code>始终运行。这样，在你保存md文件后，刷新<code>localhost</code>，就能立刻看到效果。</p><p>上传修改到<code>Github Page</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br>hexo d<br></code></pre></td></tr></table></figure><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>文中引用的各类文章很多，不再一一列出。再次对 <code>MUG-chen</code> 以及文内所有引用源的作者表示感谢！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>欢迎来到杂货铺</title>
    <link href="/posts/1439.html"/>
    <url>/posts/1439.html</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>……</p><p>我就描述一下我对它的想象吧</p><p>这个杂货铺，它可能……处在一个相对繁忙的地段，周围都是匆匆走过的人和川流不息的车。</p><p>但是在杂货铺周围，人会少很多。它也许在一个巷子的内侧，也许在一条不是主干道的街边。</p><p>远远地能听见繁忙城市的底噪，反而更显此处的清净。</p><p>它就这样开着。它的店面很小，简单的招牌。没有大张旗鼓的卖力揽客，在一个大厦林立的城市中很不起眼</p><p>在城市的底噪之外，宁静地等待探寻到这里的客人</p><p>这是一家杂货铺，但每件杂物都只有一两份。似乎把杂物卖了赚钱并不是这个杂货铺的目的。更多的意义可能是……陈列</p><p>这大多是一些精致的、独特的小物件，可能很多都是在这个繁忙的城市中很难找到的。由这些性质推测，它的东西，大概有不少是旧物。</p><p>也因此，整个店的装潢都有一种古朴的气氛。</p><p>但并不破败。店主一直在细心地照料、布置这个地方。这里的每一件物品，可能都是他的收藏。每当有顾客走进这里，拿起一件杂物，店主都愿意和客人分享它背后的故事。</p><p>窗边有一张小桌子，店主可以和客人坐下聊天。当然，它是空的。</p><p>夕阳，斜射的阳光洒在室内，一片暖色。杂货铺就这样，静静等待有心人的到来。</p><p>门上的铃铛响了。有客人来了……</p><p>……</p></blockquote><p>是为序。</p><h2 id="社交媒体的尽头"><a href="#社交媒体的尽头" class="headerlink" title="社交媒体的尽头"></a>社交媒体的尽头</h2><p>为什么要做博客？</p><p>我并不是一个擅长分享或是写作的人。近几年，从创建微信公众号以来，前前后后搞了不少社交媒体，最大的感受是：能分享东西的平台越多，想分享的愿望、以及能分享的东西似乎越少了。</p><p>所以，当我有建博客的冲动的时候，我一般会首先让自己冷静下来：我没有必要再创建一个社交媒体。其次告诉自己，这是一个技术上超出我能力的事情。</p><p>不过，当陈做出一个博客的时候，我才意识到，建立一个博客在技术上是可行的。我和陈是高中同学。至少在半年前，我和他（大概）在网页上的知识都基本没有。如果他能够做出一个精美的博客，那我也一定可以。更棒的是，他专门写了一篇博文来介绍他的搭建过程。</p><p>所以，那种建立博客的欲望又萌生了。不过内心的另一个自己仍然在提醒我：我没有必要再创建一个社交媒体。但是这种欲望相比以往是那么强烈，挥之不去。我便在Tg的channel上问了问频道关注者的看法。有人回复：「 <em>去建吧，社交媒体不属于你的；可博客是</em> 」</p><p>所以我就“去建”了。最开始只是抱着试试的态度，却在一天内，几个小时，突然地做出来了。输入自己的域名，看到我的网页出现在我眼前的时候，我的心情很难以描述。就像是一直以来都认为不可能的事情，突然就做到了，还明晃晃的在眼前做到了。</p><p>那几天晚上很激动，睡的很不好。</p><p>当然，建的同时我也一直在问自己，我到底建它干什么。这几天我也更频繁地翻看其他人的各种博客，不断思考“博客”相比微信公众号等平台的不同之处。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
